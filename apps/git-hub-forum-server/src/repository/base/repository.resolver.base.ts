/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Repository } from "./Repository";
import { RepositoryCountArgs } from "./RepositoryCountArgs";
import { RepositoryFindManyArgs } from "./RepositoryFindManyArgs";
import { RepositoryFindUniqueArgs } from "./RepositoryFindUniqueArgs";
import { CreateRepositoryArgs } from "./CreateRepositoryArgs";
import { UpdateRepositoryArgs } from "./UpdateRepositoryArgs";
import { DeleteRepositoryArgs } from "./DeleteRepositoryArgs";
import { IssueFindManyArgs } from "../../issue/base/IssueFindManyArgs";
import { Issue } from "../../issue/base/Issue";
import { RepositoryService } from "../repository.service";
@graphql.Resolver(() => Repository)
export class RepositoryResolverBase {
  constructor(protected readonly service: RepositoryService) {}

  async _repositoriesMeta(
    @graphql.Args() args: RepositoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Repository])
  async repositories(
    @graphql.Args() args: RepositoryFindManyArgs
  ): Promise<Repository[]> {
    return this.service.repositories(args);
  }

  @graphql.Query(() => Repository, { nullable: true })
  async repository(
    @graphql.Args() args: RepositoryFindUniqueArgs
  ): Promise<Repository | null> {
    const result = await this.service.repository(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Repository)
  async createRepository(
    @graphql.Args() args: CreateRepositoryArgs
  ): Promise<Repository> {
    return await this.service.createRepository({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Repository)
  async updateRepository(
    @graphql.Args() args: UpdateRepositoryArgs
  ): Promise<Repository | null> {
    try {
      return await this.service.updateRepository({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Repository)
  async deleteRepository(
    @graphql.Args() args: DeleteRepositoryArgs
  ): Promise<Repository | null> {
    try {
      return await this.service.deleteRepository(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Issue], { name: "issues" })
  async findIssues(
    @graphql.Parent() parent: Repository,
    @graphql.Args() args: IssueFindManyArgs
  ): Promise<Issue[]> {
    const results = await this.service.findIssues(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
